import tkinter as tk
from tkinter import ttk
from transformers import pipeline
from nltk.corpus import wordnet
import nltk

nltk.download('wordnet')
nltk.download('omw-1.4')

try:
    unmasker = pipeline('fill-mask', model='bert-base-uncased')
except Exception as e:
    print(f"Error initializing the transformers pipeline: {e}")
    unmasker = None

predefined_dict = {'trio': 'three', 'soft': 'comfortable or not hard',
                   'max': 'maximum', 'log': 'wooden log', 'in': 'inside',
                   'ball': 'Spherical shape toy', 'loon': "foolish or sill person",
                   'tree': 'a tall plant that can live for a long time',
                   'win': 'victory, to be the best, success in competition', 'dow': 'have worth, to be able'}

def segment_word(word):
    segments = []
    start = 0
    
    while start < len(word):
        for end in range(len(word), start, -1):
            segment = word[start:end]
            if segment in predefined_dict:
                segments.append(segment)
                start = end
                break
        else:
            start += 1  # Move to the next character if no segment is found
    
    return segments

def get_meanings_and_synonyms(word):
    synonyms = set()
    meanings = set()
    
    for syn in wordnet.synsets(word):
        meanings.add(syn.definition())
        for lemma in syn.lemmas():
            synonyms.add(lemma.name())
    
    return list(meanings), list(synonyms)

def generate_new_words(segment):
    new_words = []
    patterns = ['er', 'ing', 'ed', 'ion', 'al', 'ful', 'ly', 'ment']
    
    for pattern in patterns:
        new_words.append(segment + pattern)
    
    predefined_related = {
        'trio': ['trior', 'trioxide', 'triomax'],
        'soft': ['software', 'softmax']
    }
    
    if segment in predefined_related:
        new_words.extend(predefined_related[segment])
    
    if unmasker:
        # Use BERT to predict possible related words
        mask_text = f"{segment} {unmasker.tokenizer.mask_token}"
        predictions = unmasker(mask_text)
        for prediction in predictions:
            new_word = prediction['token_str'].strip()
            if new_word not in new_words:
                new_words.append(new_word)
    
    return new_words

def process_word():
    word = word_entry.get()
    segments = segment_word(word)
    
    segments_text.delete('1.0', tk.END)
    meanings_text.delete('1.0', tk.END)
    synonyms_text.delete('1.0', tk.END)
    new_words_text.delete('1.0', tk.END)
    
    if not segments:
        segments_text.insert(tk.END, "No segments found.\n")
        return
    
    segments_text.insert(tk.END, f"Segments: {', '.join(segments)}\n\n")
    
    for segment in segments:
        meanings, synonyms = get_meanings_and_synonyms(segment)
        segments_text.insert(tk.END, f"Segment: {segment}\n")
        meanings_text.insert(tk.END, f"Meanings for '{segment}': {', '.join(meanings) if meanings else 'None'}\n\n")
        synonyms_text.insert(tk.END, f"Synonyms for '{segment}': {', '.join(synonyms) if synonyms else 'None'}\n\n")
        
        new_words = generate_new_words(segment)
        new_words_text.insert(tk.END, f"New words for '{segment}': {', '.join(new_words) if new_words else 'None'}\n\n")

root = tk.Tk()
root.title("Word Processor")

root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=1)
root.columnconfigure(2, weight=1)
root.rowconfigure(2, weight=1)
root.rowconfigure(4, weight=1)
root.rowconfigure(6, weight=1)
root.rowconfigure(8, weight=1)

ttk.Label(root, text="Enter a word:").grid(row=0, column=0, padx=10, pady=10)
word_entry = ttk.Entry(root, width=30)
word_entry.grid(row=0, column=1, padx=10, pady=10, sticky='ew')

process_button = ttk.Button(root, text="Process Word", command=process_word)
process_button.grid(row=0, column=2, padx=10, pady=10)

ttk.Label(root, text="Segments:").grid(row=1, column=0, padx=10, pady=10, sticky='nw')
segments_text = tk.Text(root, width=50, height=10, wrap=tk.WORD)
segments_text.grid(row=2, column=0, columnspan=3, padx=10, pady=10, sticky='nsew')

ttk.Label(root, text="Meanings:").grid(row=3, column=0, padx=10, pady=10, sticky='nw')
meanings_text = tk.Text(root, width=50, height=10, wrap=tk.WORD)
meanings_text.grid(row=4, column=0, columnspan=3, padx=10, pady=10, sticky='nsew')

ttk.Label(root, text="Synonyms:").grid(row=5, column=0, padx=10, pady=10, sticky='nw')
synonyms_text = tk.Text(root, width=50, height=10, wrap=tk.WORD)
synonyms_text.grid(row=6, column=0, columnspan=3, padx=10, pady=10, sticky='nsew')

ttk.Label(root, text="New Words:").grid(row=7, column=0, padx=10, pady=10, sticky='nw')
new_words_text = tk.Text(root, width=50, height=10, wrap=tk.WORD)
new_words_text.grid(row=8, column=0, columnspan=3, padx=10, pady=10, sticky='nsew')

root.mainloop()
